"""
location_service.py - Servicio de validaci√≥n de ubicaci√≥n GPS para HISPE PULSE
Valida que el usuario est√© dentro del rango permitido para marcar asistencia
"""

import math
import logging
import re
import os
from typing import Dict, Optional, Tuple
from datetime import datetime

logger = logging.getLogger(__name__)

class LocationValidationError(Exception):
    """Excepci√≥n personalizada para errores de validaci√≥n de ubicaci√≥n"""
    pass

class LocationService:
    def __init__(self):
        # Configuraci√≥n de tolerancia (700 metros seg√∫n tu .env)
        self.ALLOWED_DISTANCE_METERS = float(os.getenv('MAX_GPS_DISTANCE', '700.0'))
        
        # Radio de la Tierra en metros
        self.EARTH_RADIUS_METERS = 6371000
        
        # Patrones para extraer coordenadas del QR
        self.QR_PATTERNS = [
            # Formato: empresa|area|codigo|lat,lng|establecimiento|...
            r'^[^|]*\|[^|]*\|[^|]*\|(-?\d+\.?\d*),\s*(-?\d+\.?\d*)\|',
            # Formato alternativo: lat,lng al inicio
            r'^(-?\d+\.?\d*),\s*(-?\d+\.?\d*)\|',
            # Formato JSON: {"lat": x, "lng": y}
            r'"lat"\s*:\s*(-?\d+\.?\d*)[^}]*"lng"\s*:\s*(-?\d+\.?\d*)',
            # Formato simple: lat,lng
            r'^(-?\d+\.?\d*),\s*(-?\d+\.?\d*)$'
        ]

    def validate_coordinates(self, latitude: float, longitude: float) -> bool:
        """
        Validar que las coordenadas est√©n en rangos v√°lidos
        
        Args:
            latitude: Latitud (-90 a 90)
            longitude: Longitud (-180 a 180)
            
        Returns:
            bool: True si las coordenadas son v√°lidas
        """
        try:
            lat = float(latitude)
            lng = float(longitude)
            
            if not (-90 <= lat <= 90):
                raise LocationValidationError(f"Latitud fuera de rango: {lat}")
            
            if not (-180 <= lng <= 180):
                raise LocationValidationError(f"Longitud fuera de rango: {lng}")
                
            return True
            
        except (ValueError, TypeError) as e:
            raise LocationValidationError(f"Coordenadas inv√°lidas: {e}")

    def extract_qr_coordinates(self, qr_code: str) -> Optional[Tuple[float, float]]:
        """
        Extraer coordenadas GPS del c√≥digo QR
        
        Args:
            qr_code: Contenido del c√≥digo QR
            
        Returns:
            Tuple[float, float]: (latitud, longitud) o None si no se encuentra
        """
        if not qr_code or not qr_code.strip():
            return None
            
        qr_clean = qr_code.strip()
        
        # Intentar cada patr√≥n
        for pattern in self.QR_PATTERNS:
            match = re.search(pattern, qr_clean)
            if match:
                try:
                    lat = float(match.group(1))
                    lng = float(match.group(2))
                    
                    # Validar coordenadas
                    if self.validate_coordinates(lat, lng):
                        logger.info(f"üéØ Coordenadas extra√≠das del QR: {lat}, {lng}")
                        return (lat, lng)
                        
                except (ValueError, LocationValidationError) as e:
                    logger.warning(f"‚ö†Ô∏è Coordenadas inv√°lidas en QR: {e}")
                    continue
        
        logger.warning(f"‚ùå No se pudieron extraer coordenadas del QR: {qr_clean[:50]}...")
        return None

    def calculate_distance(self, lat1: float, lng1: float, lat2: float, lng2: float) -> float:
        """
        Calcular distancia entre dos puntos usando la f√≥rmula de Haversine
        
        Args:
            lat1, lng1: Coordenadas del primer punto
            lat2, lng2: Coordenadas del segundo punto
            
        Returns:
            float: Distancia en metros
        """
        try:
            # Convertir grados a radianes
            lat1_rad = math.radians(lat1)
            lng1_rad = math.radians(lng1)
            lat2_rad = math.radians(lat2)
            lng2_rad = math.radians(lng2)
            
            # Diferencias
            dlat = lat2_rad - lat1_rad
            dlng = lng2_rad - lng1_rad
            
            # F√≥rmula de Haversine
            a = (math.sin(dlat / 2) ** 2 + 
                 math.cos(lat1_rad) * math.cos(lat2_rad) * 
                 math.sin(dlng / 2) ** 2)
            
            c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
            
            # Distancia en metros
            distance = self.EARTH_RADIUS_METERS * c
            
            logger.debug(f"üìè Distancia calculada: {distance:.2f}m")
            return distance
            
        except Exception as e:
            logger.error(f"‚ùå Error calculando distancia: {e}")
            raise LocationValidationError(f"Error en c√°lculo de distancia: {e}")

    def validate_location(
        self, 
        user_lat: float, 
        user_lng: float, 
        qr_code: str,
        tolerance_meters: Optional[float] = None
    ) -> Dict[str, any]:
        """
        Validar si el usuario est√° en ubicaci√≥n permitida
        
        Args:
            user_lat: Latitud del usuario
            user_lng: Longitud del usuario
            qr_code: C√≥digo QR con coordenadas del punto de marcaci√≥n
            tolerance_meters: Tolerancia en metros (opcional)
            
        Returns:
            Dict con resultado de validaci√≥n:
            {
                'valid': bool,
                'distance': float,
                'message': str,
                'qr_coordinates': tuple,
                'user_coordinates': tuple
            }
        """
        tolerance = tolerance_meters or self.ALLOWED_DISTANCE_METERS
        
        try:
            # Validar coordenadas del usuario
            self.validate_coordinates(user_lat, user_lng)
            
            # Extraer coordenadas del QR
            qr_coords = self.extract_qr_coordinates(qr_code)
            if not qr_coords:
                return {
                    'valid': False,
                    'distance': None,
                    'message': 'El c√≥digo QR no contiene coordenadas v√°lidas de ubicaci√≥n',
                    'qr_coordinates': None,
                    'user_coordinates': (user_lat, user_lng),
                    'error_code': 'INVALID_QR_COORDINATES'
                }
            
            qr_lat, qr_lng = qr_coords
            
            # Calcular distancia
            distance = self.calculate_distance(user_lat, user_lng, qr_lat, qr_lng)
            
            # Verificar si est√° dentro del rango
            is_valid = distance <= tolerance
            
            if is_valid:
                message = f'‚úÖ Ubicaci√≥n v√°lida (distancia: {distance:.1f}m)'
                logger.info(f"‚úÖ Validaci√≥n GPS exitosa - Distancia: {distance:.1f}m <= {tolerance}m")
            else:
                message = f'‚ùå Muy lejos del punto de marcaci√≥n. Distancia: {distance:.1f}m (m√°ximo: {tolerance}m)'
                logger.warning(f"‚ùå Validaci√≥n GPS fall√≥ - Distancia: {distance:.1f}m > {tolerance}m")
            
            return {
                'valid': is_valid,
                'distance': round(distance, 1),
                'message': message,
                'qr_coordinates': qr_coords,
                'user_coordinates': (user_lat, user_lng),
                'tolerance': tolerance,
                'error_code': None if is_valid else 'DISTANCE_EXCEEDED'
            }
            
        except LocationValidationError as e:
            logger.error(f"‚ùå Error de validaci√≥n: {e}")
            return {
                'valid': False,
                'distance': None,
                'message': f'Error de validaci√≥n: {str(e)}',
                'qr_coordinates': qr_coords if 'qr_coords' in locals() else None,
                'user_coordinates': (user_lat, user_lng),
                'error_code': 'VALIDATION_ERROR'
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error inesperado en validaci√≥n: {e}")
            return {
                'valid': False,
                'distance': None,
                'message': 'Error interno procesando ubicaci√≥n',
                'qr_coordinates': None,
                'user_coordinates': (user_lat, user_lng),
                'error_code': 'INTERNAL_ERROR'
            }

    def validate_qr_format(self, qr_code: str) -> Dict[str, any]:
        """
        Validar formato del c√≥digo QR y extraer informaci√≥n
        
        Args:
            qr_code: Contenido del c√≥digo QR
            
        Returns:
            Dict con informaci√≥n del QR:
            {
                'valid': bool,
                'coordinates': tuple,
                'company': str,
                'area': str,
                'establishment_id': str,
                'message': str
            }
        """
        try:
            if not qr_code or not qr_code.strip():
                return {
                    'valid': False,
                    'message': 'C√≥digo QR vac√≠o',
                    'error_code': 'EMPTY_QR'
                }
            
            qr_clean = qr_code.strip()
            
            # Intentar formato est√°ndar: empresa|area|codigo|lat,lng|establecimiento|...
            parts = qr_clean.split('|')
            if len(parts) >= 5:
                try:
                    company = parts[0].strip()
                    area = parts[1].strip()
                    code = parts[2].strip()
                    coords_str = parts[3].strip()
                    establishment = parts[4].strip()
                    
                    # Extraer coordenadas
                    coords = self.extract_qr_coordinates(qr_code)
                    if coords:
                        return {
                            'valid': True,
                            'coordinates': coords,
                            'company': company,
                            'area': area,
                            'code': code,
                            'establishment_id': establishment,
                            'message': 'QR v√°lido con formato est√°ndar',
                            'format': 'standard'
                        }
                        
                except Exception as e:
                    logger.warning(f"Error parseando QR est√°ndar: {e}")
            
            # Intentar extraer solo coordenadas
            coords = self.extract_qr_coordinates(qr_code)
            if coords:
                return {
                    'valid': True,
                    'coordinates': coords,
                    'company': 'No especificado',
                    'area': 'No especificado',
                    'code': qr_clean[:20],
                    'establishment_id': 'No especificado',
                    'message': 'QR v√°lido con coordenadas',
                    'format': 'coordinates_only'
                }
            
            return {
                'valid': False,
                'message': 'Formato de QR no reconocido o sin coordenadas v√°lidas',
                'error_code': 'INVALID_FORMAT'
            }
            
        except Exception as e:
            logger.error(f"Error validando formato QR: {e}")
            return {
                'valid': False,
                'message': f'Error procesando QR: {str(e)}',
                'error_code': 'PROCESSING_ERROR'
            }

    def get_location_info(self, latitude: float, longitude: float) -> Dict[str, str]:
        """
        Obtener informaci√≥n descriptiva de una ubicaci√≥n
        
        Args:
            latitude: Latitud
            longitude: Longitud
            
        Returns:
            Dict con informaci√≥n de la ubicaci√≥n
        """
        try:
            # Informaci√≥n b√°sica de coordenadas
            lat_hemisphere = "Norte" if latitude >= 0 else "Sur"
            lng_hemisphere = "Este" if longitude >= 0 else "Oeste"
            
            # Formatear coordenadas
            lat_formatted = f"{abs(latitude):.6f}¬∞ {lat_hemisphere}"
            lng_formatted = f"{abs(longitude):.6f}¬∞ {lng_hemisphere}"
            
            return {
                'latitude_formatted': lat_formatted,
                'longitude_formatted': lng_formatted,
                'coordinates_string': f"{latitude:.6f}, {longitude:.6f}",
                'hemisphere': f"{lat_hemisphere}-{lng_hemisphere}",
                'precision': '¬±3-5 metros (GPS t√≠pico)'
            }
            
        except Exception as e:
            logger.error(f"Error obteniendo info de ubicaci√≥n: {e}")
            return {
                'latitude_formatted': 'Error',
                'longitude_formatted': 'Error',
                'coordinates_string': 'Error',
                'hemisphere': 'Desconocido',
                'precision': 'No disponible'
            }

    def is_within_peru(self, latitude: float, longitude: float) -> bool:
        """
        Verificar si las coordenadas est√°n dentro del territorio peruano (aproximado)
        
        Args:
            latitude: Latitud
            longitude: Longitud
            
        Returns:
            bool: True si est√° dentro de Per√∫
        """
        try:
            # L√≠mites aproximados de Per√∫
            peru_bounds = {
                'north': 0.5,
                'south': -18.5,
                'east': -68.0,
                'west': -81.5
            }
            
            is_within = (peru_bounds['south'] <= latitude <= peru_bounds['north'] and
                        peru_bounds['west'] <= longitude <= peru_bounds['east'])
            
            if not is_within:
                logger.warning(f"‚ö†Ô∏è Coordenadas fuera de Per√∫: {latitude}, {longitude}")
            
            return is_within
            
        except Exception as e:
            logger.error(f"Error verificando ubicaci√≥n en Per√∫: {e}")
            return True  # Asumir v√°lido en caso de error

    def validate_accuracy(self, accuracy: Optional[float]) -> Dict[str, any]:
        """
        Validar la precisi√≥n del GPS
        
        Args:
            accuracy: Precisi√≥n en metros (opcional)
            
        Returns:
            Dict con validaci√≥n de precisi√≥n
        """
        try:
            max_accuracy = float(os.getenv('MAX_GPS_ACCURACY', '600.0'))
            
            if accuracy is None:
                return {
                    'valid': True,
                    'message': 'Precisi√≥n no reportada',
                    'quality': 'unknown'
                }
            
            if accuracy <= 5:
                return {
                    'valid': True,
                    'message': f'Excelente precisi√≥n GPS: ¬±{accuracy}m',
                    'quality': 'excellent'
                }
            elif accuracy <= 20:
                return {
                    'valid': True,
                    'message': f'Buena precisi√≥n GPS: ¬±{accuracy}m',
                    'quality': 'good'
                }
            elif accuracy <= max_accuracy:
                return {
                    'valid': True,
                    'message': f'Precisi√≥n GPS aceptable: ¬±{accuracy}m',
                    'quality': 'acceptable'
                }
            else:
                return {
                    'valid': False,
                    'message': f'Precisi√≥n GPS insuficiente: ¬±{accuracy}m (requiere <{max_accuracy}m)',
                    'quality': 'poor'
                }
                
        except Exception as e:
            logger.error(f"Error validando precisi√≥n GPS: {e}")
            return {
                'valid': True,
                'message': 'Error evaluando precisi√≥n',
                'quality': 'error'
            }

    def generate_location_report(
        self, 
        user_lat: float, 
        user_lng: float, 
        qr_code: str,
        accuracy: Optional[float] = None
    ) -> Dict[str, any]:
        """
        Generar reporte completo de validaci√≥n de ubicaci√≥n
        
        Args:
            user_lat: Latitud del usuario
            user_lng: Longitud del usuario
            qr_code: C√≥digo QR
            accuracy: Precisi√≥n GPS (opcional)
            
        Returns:
            Dict con reporte completo
        """
        try:
            # Validaci√≥n principal
            validation = self.validate_location(user_lat, user_lng, qr_code)
            
            # Validaci√≥n de QR
            qr_info = self.validate_qr_format(qr_code)
            
            # Informaci√≥n de ubicaci√≥n
            user_info = self.get_location_info(user_lat, user_lng)
            qr_location_info = None
            if qr_info.get('coordinates'):
                qr_lat, qr_lng = qr_info['coordinates']
                qr_location_info = self.get_location_info(qr_lat, qr_lng)
            
            # Validaci√≥n de precisi√≥n
            accuracy_info = self.validate_accuracy(accuracy)
            
            # Verificar si est√° en Per√∫
            in_peru = self.is_within_peru(user_lat, user_lng)
            
            return {
                'validation': validation,
                'qr_info': qr_info,
                'user_location': {
                    'coordinates': (user_lat, user_lng),
                    'info': user_info,
                    'in_peru': in_peru
                },
                'qr_location': {
                    'coordinates': qr_info.get('coordinates'),
                    'info': qr_location_info
                },
                'accuracy': accuracy_info,
                'timestamp': datetime.now().isoformat(),
                'summary': {
                    'overall_valid': (validation['valid'] and 
                                    qr_info['valid'] and 
                                    accuracy_info['valid'] and 
                                    in_peru),
                    'primary_issue': self._get_primary_issue(validation, qr_info, accuracy_info, in_peru)
                }
            }
            
        except Exception as e:
            logger.error(f"Error generando reporte de ubicaci√≥n: {e}")
            return {
                'validation': {'valid': False, 'message': 'Error interno'},
                'summary': {
                    'overall_valid': False,
                    'primary_issue': f'Error interno: {str(e)}'
                }
            }

    def _get_primary_issue(self, validation, qr_info, accuracy_info, in_peru):
        """Obtener el problema principal si la validaci√≥n falla"""
        if not qr_info['valid']:
            return qr_info.get('message', 'QR inv√°lido')
        elif not in_peru:
            return 'Ubicaci√≥n fuera del territorio peruano'
        elif not accuracy_info['valid']:
            return accuracy_info.get('message', 'Precisi√≥n GPS insuficiente')
        elif not validation['valid']:
            return validation.get('message', 'Fuera del rango permitido')
        else:
            return 'Validaci√≥n exitosa'

# Instancia global del servicio
location_service = LocationService()